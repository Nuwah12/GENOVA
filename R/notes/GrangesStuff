TADbedToGranges <- function(inpath, ...){
  infile <- read.delim(inpath, header=FALSE)
  vijf <- infile[,1:3]
  if(!any(grepl(infile$V1, pattern =  "chr") )){
    vijf[,1 ] <- gsub(vijf[,1], pattern = "^", replacement = "chr")
  }
  colnames(vijf) <- c("seqnames", "start", "end")
  for(i in 1:nrow(vijf)){
    if(vijf[i,3] < vijf[i,2]){
      d <- vijf[i,3]
      vijf[i,3] <- vijf[i,2]
      vijf[i,2] <- d
    }
  }
  gr <- GenomicRanges::makeGRangesFromDataFrame(vijf)
  return(gr)
}

transcriptsToGranges <- function(df, ...){
  vijf <- df[,c(1:3,15,5,10)]
  vijf <- vijf[,c(3,4,5,1,2,6)]
  if(!any(grepl(df$V1, pattern =  "chr") )){
    vijf[,1 ] <- gsub(vijf[,1], pattern = "^", replacement = "chr")
  }
  colnames(vijf)[1:3] <- c("seqnames", "start", "end")
  for(i in 1:nrow(vijf)){
    if(vijf[i,3] < vijf[i,2]){
      d <- vijf[i,3]
      vijf[i,3] <- vijf[i,2]
      vijf[i,2] <- d
    }
  }
  gr <- GenomicRanges::makeGRangesFromDataFrame(vijf, keep.extra.columns = T)
  return(gr)
}

transcriptsToGrangesBETA <- function(df, ...){
  vijf <- df[,c(1:3,15,5,11)]
  vijf <- vijf[,c(3,4,5,1,2,6)]
  if(!any(grepl(df$V1, pattern =  "chr") )){
    vijf[,1 ] <- gsub(vijf[,1], pattern = "^", replacement = "chr")
  }
  colnames(vijf)[1:3] <- c("seqnames", "start", "end")
  for(i in 1:nrow(vijf)){
    if(vijf[i,3] < vijf[i,2]){
      d <- vijf[i,3]
      vijf[i,3] <- vijf[i,2]
      vijf[i,2] <- d
    }
  }
  gr <- GenomicRanges::makeGRangesFromDataFrame(vijf, keep.extra.columns = T)
  return(gr)
}

bedToGranges <- function(inpath, ...){
  infile <- read.delim(inpath, header=FALSE)
  vijf <- infile[,1:3]
  if(!any(grepl(infile$V1, pattern =  "chr") )){
    vijf[,1 ] <- gsub(vijf[,1], pattern = "^", replacement = "chr")
  }
  colnames(vijf) <- c("seqnames", "start", "end")
  mid <- (vijf[,3]+vijf[,2])/2
  med <- median(abs(vijf[,3]-vijf[,2]))
  vijf[,2] <- mid-(med/2)
  vijf[,3]<- mid+(med/2)
  gr <- GenomicRanges::makeGRangesFromDataFrame(vijf)
  return(gr)
}

TADbedToGranges <- function(inpath, ...){
  infile <- read.delim(inpath, header=FALSE)
  vijf <- infile[,1:3]
  if(!any(grepl(infile$V1, pattern =  "chr") )){
    vijf[,1 ] <- gsub(vijf[,1], pattern = "^", replacement = "chr")
  }
  colnames(vijf) <- c("seqnames", "start", "end")
  vijf[,3]<- vijf[,2]-500
  vijf[,3]<- vijf[,2]+500
  gr <- GenomicRanges::makeGRangesFromDataFrame(vijf)
  return(gr)
}

useOverlappingChipPeaks <- function(anchors, peaks, side = 5){
# assumes chip-peaks are coord-sorted!
  fo <- findOverlaps(anchors, peaks)
  df <- NULL
  for(i in 1:length(anchors)){
    
    hits <- unlist(fo[fo@queryHits == i]@subjectHits)
    if(length(hits) == 0){
      s <- anchors[i]@ranges@start
      width2 <- floor(anchors[i]@ranges@width/2)
      sta <- s + width2
      sto <- s + width2 +1
      dff <- GenomicRanges::makeGRangesFromDataFrame(data.frame(seqnames = as.character(unlist(anchors[i]@seqnames)),
                 start = sta,
                 end = sto))
      df <- rbind(df , GenomicRanges::as.data.frame(dff))
    } else {
#       theHit <- 0
#       if(length(hits) %% 2 == 0){
#         theHit <- sample(hits[c(length(hits)/2, 1+(length(hits)/2))], size = 1)
#       } else {
#         theHit <- median(hits)
#       }
        if(side == 5){
          theHit <- min(hits)
        } else {
          theHit <-max(hits)
        }
      df <- rbind(df , GenomicRanges::as.data.frame(peaks[theHit]))
    }
  }
  return(makeGRangesFromDataFrame(df))
}
